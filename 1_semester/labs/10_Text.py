# Завойских Евгения, ИУ7-13Б
# Написать программу, выполняющую команды из меню по работе с заданным текстом


# Функция, определяющая, является ли переданная строка словом
def is_word(s):
    # Проверяем каждый символ строки, является ли он буквой
    for x in s:
        if not('A' <= x <= 'Z' or 'a' <= x <= 'z' or 'А' <= x <= 'Я' or 'а' <= x <= 'я'):
            return False

    return True

# Функция, разбивающая выражение на части(числа, знаки)
def break_expression(exp):
    parts = []  # Части выражения
    num = ''  # Строка с числом
    for i in range(len(exp)):
        x = exp[i]  # Текущий символ выражения
        if x == '(' or x == ')' or x == '^' or x == '*' or x == '/' or \
           x == '%' or x == '+' or x == '-':  # Текущий символ выражения - знак
            if num != '':  # До этого было число
                num2 = float(num)
                parts.append(num)
                num = ''

                if x == ')' and num2 < 0:  # Закончилось отрицательное число
                    continue

            if i > 0 and x == '/' and exp[i - 1] == '/':  # Встретилось деление //
                parts[len(parts) - 1] = '//'
            elif x == '-' and exp[i - 1] == '(':  # Встретилось отрицательное число
                del parts[len(parts) - 1]
                num = '-'
            else:
                parts.append(x)
        else:  # Текущий символ выражения - часть числа
            num += x

    if num != '':  # В конце было число
        parts.append(num)

    return parts

# Функция, вычисляющая степени чисел в выражении
def calc_degrees(parts):
    parts2 = []  # Части выражения с вычисленными степенями
    f = True  # Не встретился второй операнд степени
    for i in range(len(parts)):
        if not f:  # Встретился второй операнд степени
            f = True
            continue  # Не добавляем его в выражение

        if parts[i] == '^':  # Нашли степень
            num = float(parts[i - 1]) ** float(parts[i + 1])  # Вычисляем степень
            parts2[len(parts2) - 1] = str(num)  # Добавляем значение вместо первого операнда
            f = False  # Далее будет второй операнд
        else:
            parts2.append(parts[i])

    return parts2

# Функция, вычисляющая произведения, частные и остатки от деления в выражении
def calc_prods(parts):
    parts2 = []  # Части выражения с вычисленными произведениями и т.д.
    f = True  # Не встретился второй операнд
    for i in range(len(parts)):
        if not f:  # Встретился второй операнд
            f = True
            continue  # Не добавляем его в выражение

        x = parts[i]  # Текущая часть выражения
        if x == '*' or x == '//' or x == '/' or x == '%':  # Нашли знак операции
            # Преобразуем операнды
            parts[i - 1], parts[i + 1] = float(parts[i - 1]), float(parts[i + 1])

            if x == '*':  # Нашли умножение
                num = parts[i - 1] * parts[i + 1]  # Вычисляем умножение
            elif x == '//':  # Нашли целочисленное деление
                num = parts[i - 1] // parts[i + 1]  # Вычисляем целочисленное деление
            elif x == '/':  # Нашли деление
                num = parts[i - 1] / parts[i + 1]  # Вычисляем деление
            elif x == '%':  # Нашли остаток от деления
                num = parts[i - 1] % parts[i + 1]  # Вычисляем остаток от деления

            parts2[len(parts2) - 1] = str(num)  # Добавляем значение вместо первого операнда
            f = False   # Далее будет второй операнд
        else:
            parts2.append(x)

    return parts2

# Функция, вычисляющая суммы и разности в выражении
def calc_sums(parts):
    parts2 = []  # Части выражения с вычисленными суммами и разностями
    f = True  # Не встретился второй операнд
    for i in range(len(parts)):
        if not f:  # Встретился второй операнд
            f = True
            continue  # Не добавляем его в выражение

        x = parts[i]  # Текущая часть выражения
        if x == '+' or x == '-':  # Нашли сложение или разность
            # Преобразуем операнды
            parts[i - 1], parts[i + 1] = float(parts[i - 1]), float(parts[i + 1])

            if x == '+':  # Нашли сложение
                num = parts[i - 1] + parts[i + 1]  # Вычисляем сумму
            elif x == '-':  # Нашли вычитание
                num = parts[i - 1] - parts[i + 1]  # Вычисляем разность

            parts2[len(parts2) - 1] = str(num)  # Добавляем значение вместо первого операнда
            f = False  # Далее будет второй операнд
        else:
            parts2.append(x)

    return parts2

# Функция, вычисляющая переданное выражение
def expression(exp):
    parts = break_expression(exp)  # Получаем части выражения(числа, знаки)
    newparts = []  # Части выражения с вычисленными скобочными выражениями
    f = True  # Пока не началось скобочное выражение
    cnt = 0  # Число незакрытых скобок
    start = 0  # Индекс начала внешнего скобочного выражения

    for i in range(len(parts)):
        x = parts[i]  # Текущая часть исходного выражения
        if x == '(':  # Встретили открывающую скобку
            if cnt == 0:  # Это начало внешнего скобочного выражения
                f = False
                start = i + 1

            cnt += 1
        elif x == ')':  # Встретили закрывающую скобку
            cnt -= 1

            if cnt == 0:  # Это конец внешнего скобочного выражения
                f = True
                end = i  # Индекс конца внешнего скобочного выражения
                miniexp = ''.join(parts[start:end])  # Внешнее скобочное выражение
                x = expression(miniexp)

        if f:  # Текущий элемент - вне скобоного выражения
            newparts.append(x)

    newparts = calc_degrees(newparts)  # Вычисляем числа в степени в выражении
    newparts = calc_prods(newparts)  # Вычисляем произведения, частные и остатки от деления в выражении
    newparts = calc_sums(newparts)  # Вычисляем суммы и разности в выражении

    return newparts[0]  # Возвращаем значение переданного выражения


# Текст
text = ['Когда я подошел, чтобы проститься, я увидел у Гэтсби на лице прежнее ',
        'выражение 11-5/4 растерянности – как будто в нем 23+88//7 зашевелилось сомнение ',
        'в полноте обретенного счастья. Почти пять лет! Были, вероятно, ',
        'сегодня минуты, когда живая Дэзи в чем-то не дотянула до Дэзи его мечтаний, ',
        '– и дело тут было 45*(-34)+8 не в ней, а в огромной жизненной силе созданного им ',
        'образа. Этот образ был лучше ее, лучше всего на свете. Он творил его ',
        'с подлинной страстью художника, (4+5)*87-9 все время что-то к нему ',
        'прибавляя, украшая его каждым ярким перышком, (11*(102-99)^4-(45-(233+200^2))*3) попадавшимся под ',
        'руку. Никакая ощутимая, реальная прелесть не может сравниться с тем, ',
        'что способен накопить человек в глубинах своей фантазии.']

choice = None  # Выбор команды еще не сделан

while choice != '0':  # Пока пользователь не решил выйти
    # Вывод списка команд
    print('\nСписок команд: ')
    print('1 - выравнивание текста по левому краю')
    print('2 - выравнивание текста по правому краю')
    print('3 - выравнивание текста по ширине')
    print('4 - удаление заданного слова')
    print('5 - замена одного слова другим во всем тексте')
    print('6 - вычисление арифметического выражения')
    print('7 - в каждом четном предложении определить самый часто встречающийся символ')
    print('0 - выход')
    choice = input('Введите номер нужной команды: ')  # Ввод нужной команды

    if choice == '0':  # Выход из программы
        print('Выход')

    elif choice == '1':  # Выравнивание текста по левому краю
        # Вывод каждой строки с левой стороны
        for s in text:
            print(s)

    elif choice == '2':  # Выравнивание текста по правому краю
        w = len(text[0])  # Ширина выводимой строки
        # Находим длину самой длинной строки
        for s in text:
            w = max(w, len(s))

        # Если самая длинная строка не последняя, то не учитываем пробел в конце строки
        if w != len(text[len(text) - 1]):
            w -= 1

        # Вывод строк кроме последней с выравниванием по правому краю без пробела в конце
        for i in range(len(text) - 1):
            s = text[i][:len(text[i]) - 1]
            print(s.rjust(w))

        # Вывод последней строки с выравниванием по правому краю
        print(text[len(text) - 1].rjust(w))

    elif choice == '3':  # Выравнивание текста по ширине
        w = len(text[0])  # Ширина выводимой строки
        # Находим длину самой длинной строки
        for s in text:
            w = max(w, len(s))

        # Если самая длинная строка не последняя, то не учитываем пробел в конце строки
        if w != len(text[len(text) - 1]):
            w -= 1

        for s in text:
            # Если строка не последняя, не учитываем пробел в конце
            if text.index(s) < len(text) - 1:
                s = s[:len(s) - 1]

            dif = w - len(s)  # Количество недостающих строке символов до максимальной
            cnt = s.count(' ')  # Число пробелов в строке

            div = dif // cnt + 1  # Основное число пробелов между двумя словами в выводимой строке
            mod = dif % cnt  # Оставшееся число пробелов

            # Смотрим все символы строки
            for x in s:
                if x == ' ':
                    print(' ' * div, end='')  # Вывод основного числа пробелов

                    if mod != 0:  # Выведены не все остаточные пробелы
                        print(' ', end='')
                        mod -= 1
                else:  # Символ - не пробел
                    print(x, end='')

            print()

    elif choice == '4':  # Удаление заданного слова
        sdel = input('Введите удаляемое слово: ')  # Ввод удаляемого слова
        # Ввод продолжается, пока вводимая строка не будет словом
        while not is_word(sdel):
            sdel = input('Введите удаляемое СЛОВО: ')

        marks = ['.', '!', '?', ',', ':', ';']  # Знаки препинания

        for s in text:
            j = text.index(s)  # Индекс текущей строки
            ss = s.split()  # Список слов и символов строки
            ss2 = []  # Список слов и символов строки без удаляемого слова

            for x in ss:
                # Элемент списка - не удаляемое слово (возможен знак препинания в конце)
                if not(x == sdel or (x[:len(x) - 1] == sdel and x[len(x) - 1] in marks)):
                    ss2.append(x)

            text[j] = ' '.join(ss2)  # Соединяем слова с символами обратно в строку
            if j < len(text) - 1:  # Строка не последняя
                text[j] += ' '

    elif choice == '5':  # Замена одного слова другим во всем тексте
        s1 = input('Введите заменяемое слово: ')  # Ввод заменяемого слова
        # Ввод продолжается, пока вводимая строка не будет словом
        while not is_word(s1):
            s1 = input('Введите заменяемое СЛОВО: ')

        s2 = input('Введите слово, которым хотите заменить предыдущее: ')  # Ввод нового слова
        # Ввод продолжается, пока вводимая строка не будет словом
        while not is_word(s2):
            s2 = input('Введите СЛОВО, которым хотите заменить предыдущее: ')

        marks = ['.', '!', '?', ',', ':', ';']  # Знаки препинания

        for s in text:
            j = text.index(s)  # Индекс текущей строки
            ss = s.split()  # Список слов и символов строки

            for i in range(len(ss)):
                x = ss[i]
                # Элемент списка - заменяемое слово и может в конце содержать знак препинания
                if x == s1 or (x[:len(x) - 1] == s1 and x[len(x) - 1] in marks):
                    ss[i] = x.replace(s1, s2)  # Замена слова

            text[j] = ' '.join(ss)  # Соединяем слова с символами обратно в строку
            if j < len(text) - 1:  # Строка не последняя
                text[j] += ' '

    elif choice == '6':  # Вычисление арифметического выражения
        for s in text:
            j = text.index(s)  # Индекс текущей строки
            ss = s.split()  # Список слов и символов строки

            for i in range(len(ss)):
                x = ss[i]
                # Элемент списка может быть выражением
                if '1' in x or '2' in x or '3' in x or '4' in x or '5' in x or \
                   '6' in x or '7' in x or '8' in x or '9' in x:
                    ss[i] = expression(x)  # Вычисляем и записываем значение выражения

            text[j] = ' '.join(ss)  # Соединяем слова с символами обратно в строку
            if j < len(text) - 1:  # Строка не последняя
                text[j] += ' '

    elif choice == '7':  # В каждом четном предложении определить самый часто встречающийся символ
        num = 1  # Номер предложения
        d = {}  # Словарь символов и их количества в предложении

        for s in text:
            for i in range(len(s)):
                x = s[i]  # Текущий символ строки
                if (x != '.' and x != '!' and x != '?') or \
                   (x == '.' and i < (len(s) - 1) and s[i + 1] != ' '):  # Текущий символ не конец предложения
                    if num % 2 == 0:  # Предложение четное
                        # Символ уже есть в словаре - увеличиваем его счетчик
                        if x in d:
                            d[x] += 1
                        # Символа нет в словаре - добавляем
                        else:
                            d[x] = 1
                else:  # Предложение закончилось
                    if num % 2 == 0:  # Предложение было четным
                        d[' '] = 0  # Не учитываем пробелы

                        # Последний символ уже есть в словаре - увеличиваем его счетчик
                        if x in d:
                            d[x] += 1
                        # Символа нет в словаре - добавляем
                        else:
                            d[x] = 1

                        maxval = max(d.values())  # Находим максимальный счетчик

                        print('В %d предложении ' % num, sep='', end='')

                        # Проверяем все пары в словаре
                        for key, value in d.items():
                            # Счетчик текущего символа максимален - выводим символ
                            if value == maxval:
                                print(key, end=' ')

                        print()
                        d.clear()  # Очищаем словарь

                    num += 1  # Переход к следующему предложению

    else:  # Введен номер несуществующей команды
        print('Введенного номера нет в списке команд, попробуйте снова')