# Завойских Евгения, ИУ7-13Б
# Задана матрица 17 на 17, поменять местами строки(первая и последняя и т.д.)
# В измененной матрице определить среднее арифметическое положительных элементов выше главной диагонали

def is_number(string):  # Проверка, является ли строка числом
    if string.isdigit():  # Строка содержит целое число
       return True
    else:  # Строка не содержит целое число
        try:  # Пробуем преобразовать к типу float
            float(string)
            return True
        except ValueError:  # В строке не число
            return False

n = 17  # Размер квадратной матрицы
R = []  # Матрица
w = 7  # Ширина столбца матрицы

print('Введите матрицу %d на %d:' % (n, n))
for i in range(n):
    row = input().split()  # Читаем строку матрицы
    while len(row) != n:  # В строке должно быть n элементов
        row = input('Введите строку снова: ').split()

    R.append(row)  # Добавляем строку в матрицу

print()
for row in R:
    for x in row:
        print(x.ljust(w, ' '), end='')  # Вывод исходной матрицы
    print()

for i in range(n // 2):
    R[i], R[n - i - 1] = R[n - i - 1], R[i]  # Меняем местами первую и последнюю строки и т.д.

for row in R:
    for x in row:
        print(x.ljust(w, ' '), end='')  # Вывод измененной матрицы
    print()

sum = 0  # Сумма положительных элементов выше главной диагонали
cnt = 0  # Количество положительных элементов выше главной диагонали
for i in range(n):
    for j in range(n):
        if j > i and is_number(R[i][j]) and float(R[i][j]) > 0:  # Элемент - положительное число, и расположен выше главной диагонали
            sum += float(R[i][j])
            cnt += 1

if (cnt > 0):  # В матрице есть положительные числа выше главной диагонали
    aver = sum / cnt  # Среднее арифметическое положительных элементов выше главной диагонали
else:  # В матрице нет положительных чисел выше главной диагонали
    aver = 0
print('\nСреднее арифметическое положительных элементов выше главной диагонали: {:.7g}'.format(aver))  # Вывод среднего арифметического




