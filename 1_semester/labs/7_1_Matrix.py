# Завойских Евгения, ИУ7-13Б
# Задана матрица 9 на 7 и массив с номерами столбцов, для которых надо определить максимальный элемент
# Значения максимальных элементов записать в массив В
# Определить среднее арифметическое этих максимальных значений

def is_number(string):  # Проверка, является ли строка числом
    if string.isdigit():  # Строка содержит целое число
       return True
    else:  # Строка не содержит целое число
        try:  # Пробуем преобразовать к типу float
            float(string)
            return True
        except ValueError:  # В строке не число
            return False

n, m = 9, 7  # Размеры матрицы
A = []  # Матрица
w = 7  # Ширина столбца матрицы

print('Введите матрицу размером %d на %d:' % (n, m))
for i in range(n):
    flag = False  # В строке не все элементы числа или их не m
    row = input().split()  # Читаем строку матрицы
    while not flag:
        flag = True  # В строке m числовых элементов
        for x in row:
            if not is_number(x):  # Есть не числовой элемент
                flag = False
        if not flag or len(row) != m:  # В строке не все элементы числа или их не m
            row = input('Введите строку снова: ').split()
            flag = False

    A.append([float(x) for x in row])  # Добавляем строку в матрицу

nums = input('Введите номера столбцов, для которых надо найти максимальный элемент: ').split()  # Читаем номера столбцов
while len(nums) == 0 or len(nums) > m:  # Число номеров от 1 по m
    nums = input('Введите номера столбцов, для которых надо найти максимальный элемент: ').split()

L = []  # Список номеров
for x in nums:
    if x.isdigit() and 0 < int(x) <= m:  # Элемент - целое число в пределах от 1 по число столбцов
        L.append(int(x))
    else:  # Элемент не может быть номером столбца матрицы
        print('%s не может быть номером столбца матрицы' % x)

B = []  # Список максимальных элементов

for j in L:
    maxel = A[0][j - 1]  # Максимальный элемент столбца
    for i in range(1, n):
        maxel = max(maxel, A[i][j - 1])  # Сравниваем с другими элементами столбца
    B.append(maxel)  # Добавляем максимальный в массив

if len(B) == 0:  # Нет верно указанных столбцов
    aver = 0
else:
    aver = sum(B) / len(B)  # Среднее арифметическое максимальных элементов

print('\nИсходная матрица')
for row in A:
    for x in row:
        print(str(x).ljust(w, ' '), end='')  # Вывод исходной матрицы
    print()

print('Номера столбцов, для которых надо найти максимальный элемент:')
for x in L:
    print(x, end=' ')  # Вывод списка номеров столбцов, для которых надо найти максимальный элемент
print()

print('Максимальные элементы в указанных столбцах:')
for x in B:
    print(x, end=' ')  # Вывод максимальных элементов в указанных столбцах
print()

print('Среднее арифметическое этих элементов = {:.7g}'.format(aver))  # Вывод среднего арифметического этих элементов







