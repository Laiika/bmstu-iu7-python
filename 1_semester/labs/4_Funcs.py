# Завойских Евгения, ИУ7-13Б
# По заданным началу, концу интервала и шагу вычислить и вывести таблицу значений двух функций
# Определить количество значений первой функции, попавших в диапазон от 0.2 по 1.6

from math import sin, cos

start, stop, step = map(float, input('Введите начало диапазона, конец и шаг: ').split())  # Ввод начала диапазона, конца и шага
print()

cnt = 0  # Счетчик количества значений первой функции, попавших в диапазон от 0.2 по 1.6

kol = int((stop - start) / step) + 1  # Число строк таблицы
w = 24  # Число символов в столбце
x = start  # Первое значение аргумента в заданном интервале

print('Таблица значений первой и второй функций: ')
print('x'.rjust(w // 2, ' ').ljust(w, ' '), end='|')  # Вывод заголовка первого столбца
print('y1'.rjust(w // 2, ' ').ljust(w, ' '), end='|')  # Вывод заголовка второго столбца
print('y2'.rjust(w // 2, ' '))  # Вывод заголовка третьего столбца

min1 = float('inf')  # Минимальное значение первой функции
max1 = float('-inf')  # Максимальное значение первой функции

eps = 1e-10  # Погрешность измерений

for i in range(kol):
    y1 = sin(x) + 0.6 * x * cos(x)  # Вычисление значения первой функции
    y2 = x ** 3 - 5.09 * x * x + 4.57 * x + 3.2  # Вычисление значения второй функции

    if abs(x) < eps:
        x = 0.0
        
    print(str('{:.3n}'.format(x)).rjust(w // 2, ' ').ljust(w, ' '), end='|')  # Вывод значения аргумента
    print(str('{:.3n}'.format(y1)).rjust(w // 2, ' ').ljust(w, ' '), end='|')  # Вывод значения первой функции
    print(str('{:.3n}'.format(y2)).rjust(w // 2, ' '))  # Вывод значения второй функции

    min1 = min(y1, min1)  # Вычисление минимального значения первой функции
    max1 = max(y1, max1)  # Вычисление максимального значения первой функции

    if 0.2 <= y1 <= 1.6:
        cnt += 1  # Засчитываем значение первой функции, попавшее в диапазон от 0.2 по 1.6

    x += step  # Переход к следующему значению интервала

print('\nКоличество значений первой функции в диапазоне от 0.2 по 1.6 равно', cnt, '\n')  # Вывод количества значений первой функции в диапазоне от 0.2 по 1.6

# Построить график первой функции с заданным количеством засечек и минимальным и максимальным значениями функции

mets = 0
while mets < 4 or mets > 8 or mets > kol:  # Число засечек на оси ординат меньше 4 или больше 8
    mets = int(input('Введите число засечек на графике функции от 4 по 8: '))  # Ввод числа засечек на оси ординат

ystep = (max1 - min1) / (mets - 1)  # Шаг между значениями на оси ординат
y = min1  # Первое значение на оси ординат

print('\nГрафик первой функции:')

print(' ' * (w // 2 + 1), end='')  # Отступ для оси значений абсцисс

for i in range(mets):
    print(str('{:.3n}'.format(y)).ljust(w // 2, ' '), end='')  # Вывод значения на оси ординат
    
    y += ystep  # Переход к следующему значению

print('\n' + ' ' * (w // 2 + 1), end='')  # Отступ для оси значений абсцисс

for i in range(mets):
    print('|'.ljust(w // 2, '-'), end='')  # Вывод оси ординат с засечками
print()


if min1 * max1 < 0:  # Ось абсцисс попадает на график
    ox = int(-min1 / ystep * (w // 2))  # Вычисление положения оси ox

x = start  # Первое значение аргумента в заданном интервале

for i in range(kol):
    print(str('{:.3n}'.format(x)).rjust(w // 2, ' '), end=' ')  # Вывод значения аргумента

    y1 = sin(x) + 0.6 * x * cos(x)  # Вычисление значения первой функции

    if abs(y1 - min1) < eps:  # Значение ординаты точки минимально
        print('*', sep='', end='')

        if min1 * max1 < 0:  # Ось абсцисс попадает на график
            print('|'.rjust(ox), end='')  # Вывод оси ox с нужным отступом
        print()
    else:
        otst = int((y1 - min1) / ystep * (w // 2))  # Вычисление положения точки (x, y1) на оси ординат

        if min1 * max1 < 0:  # Ось абсцисс попадает на график
            if otst < ox:  # Сначала идет точка графика, затем ось ox 
                print('|', '*'.rjust(otst), sep='', end='')  # Вывод точки с нужным отступом
                
                if otst == 0:  # Значение ординаты точки не минимально, но отступ очень мал
                    otst = 1
                    
                print('|'.rjust(ox - otst))  # Вывод оси ox с нужным отступом
                
            elif ox < otst:  # Сначала идет ось ox, затем точка графика
                print('|', '|'.rjust(ox), sep='', end='')  # Вывод оси ox с нужным отступом

                if ox == 0:  # Ось ox не совпала с линией координат x, но отступ очень мал
                    ox = 1
                    
                print('*'.rjust(otst - ox))  # Вывод точки с нужным отступом
                
            else:  # Точка лежит на оси ox
                print('|', '*'.rjust(otst), sep='')  # Вывод точки с нужным отступом
        else:  # Ось ox совпала с линией координат x или не попадает на график
            print('|', '*'.rjust(otst), sep='')  # Вывод точки с нужным отступом

            

    x += step  # Переход к следующему значению интервала














