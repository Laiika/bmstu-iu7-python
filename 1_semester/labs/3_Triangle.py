# Завойских Евгения, ИУ7-13Б
from math import sqrt

# Определение длин сторон треугольника по заданным целочисленным координатам вершин
ab = ac = bc = 0
eps = 1e-10  # Погрешность вычислений

while (abs(ab - ac - bc) < eps) or (abs(ac - ab - bc) < eps) or (abs(bc - ac - ab) < eps):  # Все три точки лежат на одной прямой
    xa, ya = map(float, input('Введите координаты x, y вершины A: ').split())  # Ввод координат вершины A
    xb, yb = map(float, input('Введите координаты x, y вершины B: ').split())  # Ввод координат вершины B
    xc, yc = map(float, input('Введите координаты x, y вершины C: ').split())  # Ввод координат вершины C

    ab = sqrt((xa - xb) ** 2 + (ya - yb) ** 2)  # Вычисление длины стороны AB
    ac = sqrt((xa - xc) ** 2 + (ya - yc) ** 2)  # Вычисление длины стороны AC
    bc = sqrt((xb - xc) ** 2 + (yb - yc) ** 2)  # Вычисление длины стороны BC

print('Длина стороны AB равна {:.4n}'.format(ab))  # Вывод длины стороны AB
print('Длина стороны AC равна {:.4n}'.format(ac))  # Вывод длины стороны AC
print('Длина стороны BC равна {:.4n}'.format(bc))  # Вывод длины стороны BC

# Определить, является ли треугольник остроугольным
cosa = (ab ** 2 + ac ** 2 - bc ** 2) / (2 * ab * ac)  # Вычисление косинуса угла A
cosb = (ab ** 2 + bc ** 2 - ac ** 2) / (2 * ab * bc)  # Вычисление косинуса угла B
cosc = (bc ** 2 + ac ** 2 - ab ** 2) / (2 * bc * ac)  # Вычисление косинуса угла C

if (cosa > 0 and cosb > 0 and cosc > 0):  # Все углы острые
    print('Треугольник остроугольный')
else:  # Есть прямой или тупой угол
    print('Треугольник не остроугольный')

# Найти медиану, проведённую из наибольшего угла треугольника
maxs = max(ab, ac, bc)  # Определение наибольшей стороны треугольника

if maxs == bc:  # Сторона BC - наибольшая
    print('Угол A - наибольший')
    xm = (xb + xc) / 2  # Вычисление координаты x середины стороны BC
    ym = (yb + yc) / 2  # Вычисление координаты y середины стороны BC
    med = sqrt((xa - xm) ** 2 + (ya - ym) ** 2)  # Вычисление длины медианы из угла A
elif maxs == ac:  # Сторона AC - наибольшая
    print('Угол B - наибольший')
    xm = (xa + xc) / 2  # Вычисление координаты x середины стороны AC
    ym = (ya + yc) / 2  # Вычисление координаты y середины стороны AC
    med = sqrt((xb - xm) ** 2 + (yb - ym) ** 2)  # Вычисление длины медианы из угла B
else:  # Сторона AB - наибольшая
    print('Угол C - наибольший')
    xm = (xb + xa) / 2  # Вычисление координаты x середины стороны AB
    ym = (yb + ya) / 2  # Вычисление координаты y середины стороны AB
    med = sqrt((xc - xm) ** 2 + (yc - ym) ** 2)  # Вычисление длины медианы из угла C

print('Длина медианы из наибольшего угла равна {:.4n}'.format(med))  # Вывод длины медианы

# По веденным координатам одной точки определить, находится ли она внутри треугольника или нет, если находится, то найти расстояние от этой точки до ближайшей стороны или её продолжения
xt, yt = map(float, input('Введите координаты x, y одной точки: ').split())  # Ввод координат одной точки T

pr1 = (xa - xt) * (yb - ya) - (xb - xa) * (ya - yt)  # Вычисление векторного произведения AB и TA
pr2 = (xb - xt) * (yc - yb) - (xc - xb) * (yb - yt)  # Вычисление векторного произведения BC и TB
pr3 = (xc - xt) * (ya - yc) - (xa - xc) * (yc - yt)  # Вычисление векторного произведения CA и TA

if (pr1 < 0 and pr2 < 0 and pr3 < 0) or (pr1 > 0 and pr2 > 0 and pr3 > 0):  # Точка находится внутри треугольника
    print('Точка находится внутри треугольника')

    at = sqrt((xa - xt) ** 2 + (ya - yt) ** 2)  # Вычисление длины стороны AT
    bt = sqrt((xb - xt) ** 2 + (yb - yt) ** 2)  # Вычисление длины стороны BT
    ct = sqrt((xc - xt) ** 2 + (yc - yt) ** 2)  # Вычисление длины стороны CT

    pabt = (ab + at + bt) / 2  # Вычисление полупериметра треугольника ABT
    sabt = sqrt(pabt * (pabt - ab) * (pabt - at) * (pabt - bt))  # Вычисление площади треугольника ABT
    habt = 2 * sabt / ab  # Вычисление расстояния от точки T к стороне AB

    pact = (ac + at + ct) / 2  # Вычисление полупериметра треугольника ACT
    sact = sqrt(pact * (pact - ac) * (pact - at) * (pact - ct))  # Вычисление площади треугольника ACT
    hact = 2 * sact / ac  # Вычисление расстояния от точки T к стороне AC

    pbct = (bc + ct + bt) / 2  # Вычисление полупериметра треугольника BCT
    sbct = sqrt(pbct * (pbct - bc) * (pbct - bt) * (pbct - ct))  # Вычисление площади треугольника BCT
    hbct = 2 * sbct / bc  # Вычисление расстояния от точки T к стороне BC

    minh = min(habt, hact, hbct)  # Определение наименьшего расстояния

    if minh == habt:  # Ближайшая сторона - AB'
        print('Ближайшая к заданной точке сторона - AB')
    elif minh == hact:  # Ближайшая сторона - AC'
        print('Ближайшая к заданной точке сторона - AC')
    else:  # Ближайшая сторона - BC'
        print('Ближайшая к заданной точке сторона - BC')

    print('Расстояние от заданной точки до ближайшей стороны равно {:.4n}'.format(minh))  # Вывод наименьшего расстояния
elif abs(pr1) < eps or abs(pr2) < eps or abs(pr3) < eps:  #  Точка лежит на одной из сторон
    if abs(pr1) < eps:  # Точка лежит на стороне AB
        print('Точка лежит на стороне AB')
    elif abs(pr2) < eps:  # Точка лежит на стороне BC
        print('Точка лежит на стороне BC')
    else:  # Точка лежит на стороне AC
        print('Точка лежит на стороне AC')
else: # Точка находится вне треугольника
    print('Точка находится вне треугольника')    











